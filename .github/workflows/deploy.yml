
name: Deploy Lambda

on:
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq zip

      # - name: Deploy to AWS Lambda
      #   uses: appleboy/lambda-action@master
      #   with:
      #     aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     function_name: 'YourLambdaFunctionName'
      #     region: 'us-east-1'
      #     zip_file: 'lambda_function.zip'
      #     runtime: 'python3.8'
      #     handler_name: 'app.lambda_handler'
      #     publish: true

      - name: Set environment variables
        id: set-env-vars 
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "API_KEY=prod_api_key" >> $GITHUB_ENV
            echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
            echo "API_KEY=dev_api_key" >> $GITHUB_ENV
            echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
          fi


      # - name: Package Lambda Function
      #   run: |
      #     cd lambda_function
      #     python3.11 -m venv venv
      #     source venv/bin/activate
      #     mkdir package
      #     pip install --no-cache-dir -r requirements.txt -t ./package
      #     cp app.py ./package/
      #     cd package
      #     zip -r ../../lambda.zip .
      #     cd ../..

      - name: Package Lambda Function
        run: |
          cd lambda_function
          # Install dependencies and your application code directly into the current directory
          pip install --no-cache-dir -r requirements.txt -t .
          # Zip all the files and folders in the current directory
          zip -r ../lambda.zip .
          cd ..

      - name: Deploy to AWS Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'
        run: |
          Function_Name="cicd_lambda_${{github.ref_name}}"
          REGION="us-east-1"
          echo "Deploying to Lambda function: $Function_Name in region: $REGION..."

          # Check if the lambda function exists
          FUNCTION_EXISTS=$(aws lambda get-function --function-name $Function_Name --region $REGION || echo "false")

          ENV_VARS="Variables={ENV=${{ env.ENV }},API_KEY=${{ env.API_KEY }},LOG_LEVEL=${{ env.LOG_LEVEL }}}"
          if [ "$FUNCTION_EXISTS" == "false" ]; then
            echo "Creating new Lambda function: $Function_Name..."
            aws lambda create-function \
               --function-name $Function_Name \
               --runtime python3.11 \
               --role arn:aws:iam::511239432024:role/test_lambda_dev \
               --handler app.lambda_handler \
               --timeout 300 \
               --zip-file fileb://lambda.zip \
               --environment "$ENV_VARS" \
               --region $REGION
          else
            echo "Updating existing Lambda function: $Function_Name..."
            aws lambda update-function-code \
              --function-name $Function_Name \
              --zip-file fileb://lambda.zip \
              --region $REGION
            
            #wait for function code update to complete
            echo "Waiting for function code update to complete..."
            while true; do
              UPDATE_STATUS=$(aws lambda get-function --function-name $Function_Name --region $REGION --query 'Configuration.LastUpdateStatus' --output text)
              if [ "$UPDATE_STATUS" == "Successful" ]; then
                echo "Function code update completed successfully."
                break
              elif [ "$UPDATE_STATUS" == "Failed" ]; then
                echo "Function code update failed."
                exit 1
              else
                echo "Function code update in progress... waiting 5 seconds."
                sleep 5
              fi
            done
          
            # Update function configuration
            aws lambda update-function-configuration \
              --function-name $Function_Name \
              --environment "$ENV_VARS" \
              --region $REGION
          fi

      - name: Verify Deployment
        run: |
          echo "Deployment to AWS Lambda completed successfully." 

